plugins {
    id 'ml-loader'
    id 'fabric-loom'
    id 'me.modmuss50.mod-publish-plugin'
}

configurations {
    includedLibs
}

sourceSets {
    testmod {
        runtimeClasspath += main.runtimeClasspath;
        compileClasspath += main.compileClasspath;
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    testmodImplementation sourceSets.main.output;

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}+${minecraft_version}"

    modImplementation "com.terraformersmc:modmenu:${mod_menu}"

    implementation group: 'com.electronwill.night-config', name: 'toml', version: "${night_config}"
    includedLibs group: 'com.electronwill.night-config', name: 'toml', version: "${night_config}"
}

loom {
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            source sourceSets.testmod
            setConfigName("Fabric Test Client")
            ideConfigGenerated(true)
            programArgs('--username', 'Dev')
            runDir("runs/client")
        }
        server {
            server()
            source sourceSets.testmod
            setConfigName("Fabric Test Server")
            ideConfigGenerated(true)
            runDir("runs/server")
        }
    }
}

jar {
    from configurations.includedLibs.collect { it.isDirectory() ? it : zipTree(it) }
}

// Loader Specific Settings
publishMods {
    file = remapJar.archiveFile
    modLoaders.addAll("fabric", "quilt")

    modrinth {
        requires('fabric-api')
    }
    curseforge {
        requires('fabric-api')
    }
}